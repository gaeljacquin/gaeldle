generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model games {
  id                  Int               @id @default(autoincrement())
  igdbId              Int               @unique(map: "games_igdb_key") @map("igdb_id")
  name                String            @db.VarChar(255)
  info                Json?
  createdAt           DateTime?         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime?         @default(now()) @map("updated_at") @db.Timestamptz(6)
  imageUrl            String?           @map("image_url") @db.VarChar
  artworks            Json?
  keywords            Json?
  franchises          Json?
  game_engines        Json?
  game_modes          Json?
  genres              Json?
  involved_companies  Json?
  platforms           Json?
  player_perspectives Json?
  release_dates       Json?
  themes              Json?
  first_release_date  Int?
  gotd                gotd[]
  unlimited_stats     unlimited_stats[]
}

model gotd {
  id          Int           @id @default(autoincrement())
  igdbId      Int?          @map("igdb_id")
  createdAt   DateTime?     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime?     @default(now()) @map("updated_at") @db.Timestamptz(6)
  modeId      Int           @map("mode_id")
  scheduled   DateTime?     @default(dbgenerated("(timezone('EST'::text, (CURRENT_DATE + '1 day'::interval)))::timestamp without time zone")) @db.Timestamptz(6)
  info        Json?
  daily_stats daily_stats[]
  games       games?        @relation(fields: [igdbId], references: [igdbId], onDelete: NoAction, map: "gotd_igdb_fk")
  modes       modes         @relation(fields: [modeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model roles {
  id        Int       @id @default(autoincrement())
  role      String    @unique(map: "roles_unique_role") @db.VarChar(50)
  label     String?   @db.VarChar
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime? @default(now()) @map("updated_at") @db.Timestamptz(6)
  users     users[]
}

model daily_stats {
  Id        Int       @id @default(autoincrement())
  gotdId    Int       @map("gotd_id")
  attempts  Int
  found     Boolean   @default(false)
  userId    Int?      @map("user_id")
  modeId    Int       @map("mode_id")
  info      Json?
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime? @default(now()) @map("updated_at") @db.Timestamptz(6)
  real      Boolean   @default(true)
  guesses   Json[]
  gotd      gotd      @relation(fields: [gotdId], references: [id], onDelete: NoAction, map: "daily_stats_gotd_fk")
  modes     modes     @relation(fields: [modeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users     users?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model unlimited_stats {
  Id          Int           @id @default(autoincrement())
  igdbId      Int?          @map("igdb_id")
  attempts    Int
  found       Boolean       @default(false)
  userId      Int?          @map("user_id")
  modeId      Int           @map("mode_id")
  info        Json?
  createdAt   DateTime?     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime?     @default(now()) @map("updated_at") @db.Timestamptz(6)
  real        Boolean       @default(true)
  guesses     Json[]
  games       games?        @relation(fields: [igdbId], references: [igdbId], onDelete: NoAction, map: "unlimited_stats_igdb_fk")
  modes       modes         @relation(fields: [modeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users       users?        @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id              Int               @id @default(autoincrement())
  email           String            @unique @db.VarChar(255)
  username        String            @unique @db.VarChar(255)
  firstName       String            @map("first_name") @db.VarChar(100)
  lastName        String            @map("last_name") @db.VarChar(100)
  roleId          Int               @map("role_id")
  profilePicture  String?           @map("profile_picture")
  password        String            @db.VarChar(255)
  createdAt       DateTime?         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime?         @default(now()) @map("updated_at") @db.Timestamptz(6)
  daily_stats     daily_stats[]
  unlimited_stats unlimited_stats[]
  roles           roles             @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_role_fkey")
}

model modes {
  id              Int               @id @default(autoincrement())
  mode            String            @unique(map: "modes_unique_mode") @db.VarChar(50)
  label           String?           @db.VarChar
  active          Boolean           @default(false)
  lives           Int               @default(1)
  description     String?           @db.VarChar
  createdAt       DateTime?         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime?         @default(now()) @map("updated_at") @db.Timestamptz(6)
  levelId         Int               @map("level_id")
  pixelation      Int               @default(10)
  pixelationStep  Int               @default(4) @map("pixelation_step")
  categoryId      Int?              @map("category_id")
  hidden          Boolean           @default(false)
  ordinal         Int               @default(1)
  isNew           Boolean           @default(true)
  daily_stats     daily_stats[]
  gotd            gotd[]
  categories      categories?       @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "modes_category_fkey")
  levels          levels            @relation(fields: [levelId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  unlimited_stats unlimited_stats[]
}

model levels {
  id         Int       @id @default(autoincrement())
  level      String    @unique(map: "levels_unique_level") @db.VarChar(50)
  label      String?   @db.VarChar
  createdAt  DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime? @default(now()) @map("updated_at") @db.Timestamptz(6)
  classNames String    @default("bg-gael-green hover:bg-gael-green") @map("class_names")
  modes      modes[]
}

model categories {
  id          Int       @id @default(autoincrement())
  category    String    @unique(map: "categories_unique_category") @db.VarChar(50)
  label       String?   @db.VarChar
  description String?   @db.VarChar
  active      Boolean   @default(false)
  createdAt  DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime? @default(now()) @map("updated_at") @db.Timestamptz(6)
  modes       modes[]
}
